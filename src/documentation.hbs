---
title: Documentation
---
{{#extend "layout"}}
  {{#content "body"}}
    <div class="copy documentation">
      <section>
        <h1>什么是铁路图</h1>

        <p>正则表达式生成的图像通常被称为"铁路图".非常简单直观地阐述了嵌套循环和多选结构等复杂问题. 阅读铁路图的最简单方式是从最左边位置开始并沿着右边的线直到最右边位置. 如果遇到分支,然后可以选择多种分支结构之一(这些路径可以循环回到先前位置).为了使字符串成功匹配图中的正则表达式,你必须能够在从左到右移动并完成整个图直到最后过程.

        <figure class="shift-right" data-expr="Lions(?: and|,) tigers,? and bears\. Oh my!"></figure>

        <p>例如: this expression will match "Lions and tigers and bears. Oh my!" or the more grammatically correct "Lions, tigers, and bears. Oh my!" (with or without an Oxford comma). The diagram first matches the string "Lions"; you cannot proceed without that in your input. Then there is a choice between a comma or the string " and". No matter what choice you make, the input string must then contain " tigers" followed by an optional comma (your path can either go through the comma or around it). Finally the string must end with " and bears. Oh my!".</p>

        <section>
          <h2>基础组成</h2>

          <p>The simplest pieces of these diagrams to understand are the parts that match some specific bit of text without an options. They are: Literals, Escape sequences, and "Any charater".</p>

          <div class="section">
            <h3>字面量</h3>

            <figure class="shift-left" data-expr="literal"></figure>

            <p>文字匹配精确的文本字符串。它们显示在一个浅蓝色框中，并用引号引起来（以便于查看任何前导或尾随空格）。</p>
          </div>

          <div class="section">
            <h3>转义字符</h3>

            <figure class="shift-left" data-expr="\w\s\d"></figure>

            <p>转义序列显示在绿色框中，并包含将与之匹配的字符类型的描述。</p>
          </div>

          <div class="section">
            <h3>任意字符</h3>

            <figure class="shift-left" data-expr="."></figure>

            <p>“任何字符”类似于转义序列。它与任何单个字符匹配。</p>
          </div>
        </section>

        <section>
          <h2>字符集合</h2>

          <figure class="shift-left" data-expr="[#a-z\n][^$0-9\b]"></figure>

          <p>字符集将匹配或不匹配单个字符的集合。它们显示为包含文字和转义序列的框。顶部的标签指示该字符集将与包含的项目“之一”或包含的项目“无”相匹配。</p>
        </section>

        <section>
          <h2>子表达式</h2>

          <figure class="shift-left" data-expr="(example\s)(?=content)"></figure>

          <p>Subexpressions are indicated by a dotted outline around the items that are in the expression. Captured subexpressions are labeled with the group number they will be captured under. Positive and negative lookahead are labeled as such.</p>
        </section>

        <section>
          <h2>选择项</h2>

          <figure class="shift-left" data-expr="one\s|two\W|three\t|four\n"></figure>

          <p>Alternation provides choices for the regular experssion. It is indicated by the path for the expression fanning out into a number of choices.</p>
        </section>

        <section>
          <h2>量词</h2>

          <p>Quantifiers indicate if part of the expression should be repeated or optional. They are displayed similarly to Alternation, by the path through the diagram branching (and possibly looping back on itself). Unless indicated by an arrow on the path, the preferred path is to continue going straight.</p>

          <div class="section">
            <h3>零个或多个</h3>

            <figure class="shift-left" data-expr="(?:greedy)*">
              <figcaption>Greedy quantifier</figcaption>
            </figure>

            <figure class="shift-left" data-expr="(?:non-greedy)*?">
              <figcaption>Non-greedy quantifier</figcaption>
            </figure>

            <p>The zero-or-more quantifier matches any number of repetitions of the pattern.</p>
          </div>

          <div class="section">
            <h3>必选的</h3>

            <figure class="shift-left" data-expr="(?:greedy)+">
              <figcaption>Greedy quantifier</figcaption>
            </figure>

            <figure class="shift-left" data-expr="(?:non-greedy)+?">
              <figcaption>Non-greedy quantifier</figcaption>
            </figure>

            <p>The required quantifier matches one or more repetitions of the pattern. Note that it does not have the path that allows the pattern to be skipped like the zero-or-more quantifier.</p>
          </div>

          <div class="section">
            <h3>可选的</h3>

            <figure class="shift-left" data-expr="(?:greedy)?">
              <figcaption>Greedy quantifier</figcaption>
            </figure>

            <figure class="shift-left" data-expr="(?:non-greedy)??">
              <figcaption>Non-greedy quantifier</figcaption>
            </figure>

            <p>The optional quantifier matches the pattern at most once. Note that it does not have the path that allows the pattern to loop back on itself like the zero-or-more or required quantifiers.</p>
          </div>

          <div class="section">
            <h3>范围值</h3>

            <figure class="shift-left" data-expr="(?:greedy){5,10}">
              <figcaption>Greedy quantifier</figcaption>
            </figure>

            <figure class="shift-left" data-expr="(?:non-greedy){5,10}?">
              <figcaption>Non-greedy quantifier</figcaption>
            </figure>

            <p>The ranged quantifier specifies a number of times the pattern may be repeated. The two examples provided here both have a range of "{5,10}", the label for the looping branch indicates the number of times that branch may be followed. The values are one less than specified in the expression since the pattern would have to be matched once before repeating it is an option. So, for these examples, the pattern would be matched once and then the loop would be followed 4 to 9 times, for a total of 5 to 10 matches of the pattern.</p>
          </div>
        </section>
      </section>
    </div>
  {{/content}}

  {{#content "footer" mode="append"}}
    <script src="./js/main.js" async defer></script>
  {{/content}}
{{/extend}}
